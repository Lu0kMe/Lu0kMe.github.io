<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/01/hello-world/</url>
    <content><![CDATA[<h1 id="I-am-lu0k😊"><a href="#I-am-lu0k😊" class="headerlink" title="I am lu0k😊"></a>I am lu0k😊</h1><ul>
<li>🌱 I am currently learning InfoSec.</li>
<li>📫 How to reach me: <a href="https://twitter.com/Lu0kMe">lu0k (@Lu0kMe) &#x2F; Twitter</a>]</li>
<li>😄 Pronouns: learning learning learning!</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/10/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><p>正则表达式可以用形式化语言理论的方式来表达。正则表达式由常量和算子组成，它们分别表示字符串的集合和在这些集合上的运算。</p>
<p>给定有限字母表Σ定义了下列常量：</p>
<ul>
<li>空集Ø表示集合Ø。</li>
<li>空串ε表示仅包含一个“不含任何字符、长度为0的字符串”的集合。</li>
<li>文本字符α∈Σ表示仅包含一个元素α的集合{α}。</li>
</ul>
<span id="more"></span>

<p>定义了下列运算：</p>
<ul>
<li>串接RS表示集合{αβ|α∈R,β∈S}，这里的αβ表示将α和β两个字符串按顺序连接。例如{ab,c}{d,ef} &#x3D; {abd,,abef,cd,cef}。</li>
<li>选择R|S表示R与S的并集。例如{ab,c}|{ab,d,ef} &#x3D; {ab,c,d,ef}。</li>
<li>克莱尼(Kleene)星号R*表示包含ε且在字符串串接运算下闭合的R的最小超集。这是可以通过R中0或有限个字符串的串接得到的所有字符的集合。例如{ab,c}* &#x3D; {ε,ab,c,abab,abc,cab,……}。</li>
</ul>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>一个正则表达式通常被称为一个模式(pattern)，为用来描述或者匹配一系列匹配某个句法规则的字符串。大部分正则表达式的形式都有如下的结构：</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><ul>
<li>竖线 | 代表选择(即或集)，具有最低优先级。例如：lu0k|luck可以匹配lu0k或luck。</li>
</ul>
<h2 id="数量"><a href="#数量" class="headerlink" title="数量"></a>数量</h2><p>某个字符后的数量限定符用来限定前面这个字符允许出现的个数。最常见的数量限定符包括 + 、 ? 和 * (不加数量限定则代表出现且仅出现一次)。</p>
<ul>
<li>加号 + 代表前面的字符必须至少出现一次。例如：lu0+k可以匹配lu0k、lu00k、lu000k等。</li>
<li>问号 ? 代表前面的字符最多只可以出现一次。例如：lu0?k可以匹配luk或lu0k。</li>
<li>星号 * 代表前面的字符可以不出现，也可以出现一次或多次。例如：lu0*k可以匹配luk、lu0k、lu00k、lu000k等。</li>
</ul>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><ul>
<li>圆括号 () 可以用来定义操作符的范围和优先度。例如：lu(0|c)k等价于lu0k|luck，(lu)?0k匹配0k和lu0k。</li>
</ul>
<p>上述的这些构造都可以自由组合，且精确的语法可能因不同的工具或程序而异。</p>
<h1 id="语法流派"><a href="#语法流派" class="headerlink" title="语法流派"></a>语法流派</h1><p>目前正则表达式主要有两大流派(flavor)：POSIX流派和PCRE流派。</p>
<h2 id="POSIX流派"><a href="#POSIX流派" class="headerlink" title="POSIX流派"></a>POSIX流派</h2><p>正则表达式的POSIX规范，分为基本型正则表达式(Basic Regular Expression，BRE)和扩展型正则表达式(Extended Regular Express，ERE)两种标准。POSIX流派的正则表达式主要用在Unix或类Unix系统中，如grep、vi、sed、egrep、awk等。</p>
<p>早期BRE与ERE的区别如下表：</p>
<table>
<thead>
<tr>
<th align="center">正则表达式特性</th>
<th align="center">BRE标准</th>
<th align="center">ERE标准</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.   ^   $   […]   [^…]</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">任意数目量词*</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">+ 和 ? 量词</td>
<td align="center">不支持(GNU扩展)</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">区间量词</td>
<td align="center">\{min,max\}</td>
<td align="center">{min,max}</td>
</tr>
<tr>
<td align="center">圆括号分组</td>
<td align="center">\{…\}</td>
<td align="center">{…}</td>
</tr>
<tr>
<td align="center">量词限定圆括号分组</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">捕获文本引用</td>
<td align="center">\1到\9</td>
<td align="center">不支持(GNU扩展)</td>
</tr>
<tr>
<td align="center">多选分支结构</td>
<td align="center">不支持(GNU扩展)</td>
<td align="center">支持</td>
</tr>
</tbody></table>
<p>现代GNU在实现POSIX时，对两种标准均做了一定的扩展，使得GNU BRE与GNU ERE的功能特性并没有太大区别，区别在于语法层面上，一些字符要不要转义。</p>
<p>POSIX流派还有一个特殊的地方就是有自己的字符组，叫做POSIX字符组。(见附录)</p>
<h2 id="PCRE流派"><a href="#PCRE流派" class="headerlink" title="PCRE流派"></a>PCRE流派</h2><p>PCRE流派是由Perl的正则表达式衍化而来的一个正则表达式流派。</p>
<p>PCRE流派的核心是PCRE库，PCRE库由Philip Hazel用C语言编写。与POSIX相比，PCRE的语法更加强大，更加灵活。而且虽然PCRE源于Perl的正则表达式功能，但随着两者的发展，在语法上产生了一些细微的差异。PCRE被广泛使用在许多开源项目中，包括Apache，PHP，KDE、Nmap等。许多编程语言的正则表达式功能多参考借鉴了PCRE，因此PCRE的语法在这些语言中同样适用。</p>
<h1 id="表达式总结"><a href="#表达式总结" class="headerlink" title="表达式总结"></a>表达式总结</h1><p>PCRE表达式是相对而言更能代表正则表达式的表达式集合，适用于多种编程语言，且POSIX流派的表达式大多包含在PCRE表达式中，因此总结PCRE表达式。</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\</td>
<td align="center">将下一个字符标记为一个特殊字符、或一个原义子符、或一个向后引用、或一个八进制转义符</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配输入字符串的开始位置。</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配输入字符串的结束位置。</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配前面的子表达式零次或多次。</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的子表达式一次或多次。</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">匹配前面的子表达式零次或一次。</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">n是一个非负整数。匹配确定的n次。</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">n是一个非负整数。至少匹配n次。</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">m和n均为非负整数，其中n&lt;&#x3D;m。最少匹配n次且最多匹配m次。</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">非贪心量化：当该字符紧跟在任何一个其他重复修饰符(*,+,?,{n},{n,},{n,m})后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除“\r”，“\n”之外的任何单个字符。</td>
</tr>
<tr>
<td align="center">(pattern)</td>
<td align="center">匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。</td>
</tr>
<tr>
<td align="center">(?:pattern)</td>
<td align="center">匹配pattern但不获取匹配的子字符串，也就是说这是一个非获取匹配，不存储匹配的子字符串用于向后引用。</td>
</tr>
<tr>
<td align="center">(?&#x3D;pattern)</td>
<td align="center">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td align="center">(?!pattern)</td>
<td align="center">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td align="center">(?&lt;&#x3D;pattern)</td>
<td align="center">反向预查，与正向肯定预查类似，只是方向相反。</td>
</tr>
<tr>
<td align="center">(?&lt;!pattern)</td>
<td align="center">反向否定预查，与正向否定预查类似，只是方向相反。</td>
</tr>
<tr>
<td align="center">x|y</td>
<td align="center">没有包围在()里，其范围是整个正则表达式。</td>
</tr>
<tr>
<td align="center">[xyz]</td>
<td align="center">字符集合。匹配所包含的任意一个字符。</td>
</tr>
<tr>
<td align="center">[^xyz]</td>
<td align="center">排除型字符集合。匹配未列出的任意字符。</td>
</tr>
<tr>
<td align="center">[a-z]</td>
<td align="center">字符范围。匹配指定范围内的任意字符。</td>
</tr>
<tr>
<td align="center">[^a-z]</td>
<td align="center">排除型的字符范围。匹配任何不在指定范围内的任意字符。</td>
</tr>
<tr>
<td align="center">[:name:]</td>
<td align="center">增加命名字符类中的字符到表达式。只能用于方括号表达式。</td>
</tr>
<tr>
<td align="center">[&#x3D;elt&#x3D;]</td>
<td align="center">增加当前locale下排序等价于字符“elt”的元素。只能用于方括号表达式。</td>
</tr>
<tr>
<td align="center">[.elt.]</td>
<td align="center">增加排序元素“elt”到表达式中。只能用于方括号表达式。</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界，也就是指单词和空格间的位置。</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">匹配非单词边界。</td>
</tr>
<tr>
<td align="center">\cx</td>
<td align="center">匹配由x指明的控制字符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。控制字符的值等于x的值最低5比特。</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">匹配一个数字字符。等价于[0-9]。注意Unicode正则表达式会匹配全角数字字符。</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。注意Unicode正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。注意Unicode正则表达式会匹配中文字符。</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td>
</tr>
<tr>
<td align="center">\xnn</td>
<td align="center">十六进制转义字符序列。匹配两个十六进制数字nn表示的字符。正则表达式中可以使用ASCII编码。</td>
</tr>
<tr>
<td align="center">\num</td>
<td align="center">向后引用一个子字符串，该子字符串与正则表达式的第num个用括号围起来的捕捉群子表达式匹配。其中num是从1开始的十进制正整数，其上限可能是9、31、99甚至无限。</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。如果n为八进制数字(0-7)，则n为一个八进制转义值。</td>
</tr>
<tr>
<td align="center">\nm</td>
<td align="center">3位八进制数字，标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字(0-7)，则\nm将匹配八进制转义值nm。</td>
</tr>
<tr>
<td align="center">\nml</td>
<td align="center">如果n为八进制数字(0-3)，且m和l均为八进制数字(0-7)，则匹配八进制转义值nml。</td>
</tr>
<tr>
<td align="center">\un</td>
<td align="center">Unicode转义字符序列。其中n是一个用四个十六进制数字表示的Unicode字符。</td>
</tr>
</tbody></table>
<h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>在.NET、Java、Python等编程语言的正则表达式中，可以用\uXXXX表示一个Unicode字符，其中XXXX为四位16进制数字。</p>
<p>Unicode字符的三种性质：</p>
<ul>
<li><p>Unicode Property：字符属于标点、空格、字母等等。每个Unicode字符只能属于唯一Unicode Property。</p>
<ul>
<li>字符\p{L}<ul>
<li>\p{Ll}或\p{Lowercase_Letter}：小写字符(必须有大写的形式)。</li>
<li>\p{Lu}或\p{Uppercase_Letter}：大写字符(必须有小写的形式)。</li>
<li>\p{Lt}或\p{Titlecase_Letter}：全词首字母大写的字符。</li>
<li>\p{L&amp;}或\p{Cased_Letter}：存在大小写形式的字符(Ll, Lu, Lt的组合)。</li>
<li>\p{Lm}或\p{Modifier_Letter}：音标修饰字符。</li>
<li>\p{Lo}或\p{Other_Letter}：不具有大小写的字符或字形。</li>
</ul>
</li>
<li>附加符号\p{M}<ul>
<li>\p{Mn}或\p{Non_Spacing_Mark}：与其他字符结合，不额外占用空间的字符，例如日耳曼语元音变音。</li>
<li>\p{Mc}或\p{Spacing_Combining_Mark}：与其他字符结合，额外占用空间的字符，例如马拉雅拉姆文#元音字母及附标。</li>
<li>\p{Me}或\p{Enclosing_Mark}：包含其他字符的字符，例如圆圈、方块。</li>
</ul>
</li>
<li>分隔符p{Z}<ul>
<li>\p{Zs}或\p{Space_Separator}：不显示但占用空间的空白字符。</li>
<li>\p{Zl}或\p{Line_Separator}：行分隔符U+2028。</li>
<li>\p{Zp}或\p{Paragraph_Separator}：段落分隔符U+2029。</li>
</ul>
</li>
<li>符号\p{S}<ul>
<li>\p{Sm}或\p{Math_Symbol}：数学符号。</li>
<li>\p{Sc}或\p{Currency_Symbol}：通货符号。</li>
<li>\p{Sk}或\p{Modifier_Symbol}：组合为其他字符的符号。</li>
<li>\p{So}或\p{Other_Symbol}：其他符号。</li>
</ul>
</li>
<li>数值字符\p{N}<ul>
<li>\p{Nd}或\p{Decimal_Digit_Number}：所有文本中的数字0至9字符，不含形意符号。</li>
<li>\p{Nl}或\p{Letter_Number}：看起来像字母的符号，包含罗马数字。</li>
<li>\p{No}或\p{Other_Number}：上角标或下角标数字，或者其他不属于0至9的数字。不含形意符号。</li>
</ul>
</li>
<li>标点符号\p{P}<ul>
<li>\p{Pd}或\p{Dash_Punctuation}：任何种类的连字号或连接号。</li>
<li>\p{Ps}或\p{Open_Punctuation}：任何种类开括号。</li>
<li>\p{Pe}或\p{Close_Punctuation}：任何种类闭括号。</li>
<li>\p{Pi}或\p{Initial_Punctuation}：任何种类开引号。</li>
<li>\p{Pf}或\p{Final_Punctuation}：任何种类闭引号。</li>
<li>\p{Pc}或\p{Connector_Punctuation}：连接词的标点符号，如下划线。</li>
<li>\p{Po}或\p{Other_Punctuation}：其他标点符号。</li>
</ul>
</li>
<li>其它符号\p{C}(包括不可见控制字符与未用码位)<ul>
<li>\p{Cc}或\p{Control}：ASCII或Latin-1控制字符0x00-0x1F与0x7F-0x9F。</li>
<li>\p{Cf}或\p{Format}：不可见的格式化指示字符。</li>
<li>\p{Co}或\p{Private_Use}：私用码位。</li>
<li>\p{Cs}或\p{Surrogate}：UTF-16编码的代理对的一半。</li>
<li>\p{Cn}或\p{Unassigned}：未被使用的码位。</li>
</ul>
</li>
</ul>
</li>
<li><p>Unicode Block：按照编码区间划分Unicode字符，每个Unicode Block中的字符编码属于一个编码区间。例如Java语言\p{ InCJK_Compatibility_Ideographs }。</p>
</li>
<li><p>Unicode Script：按照字符所属的书写系统来划分Unicode字符。例如\p{Han}表示汉字(中文字符)。</p>
</li>
</ul>
<p>这三种Unicode性质对应的字符组补集是将开头的\p改为\P，其他不变。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="POSIX字符组"><a href="#POSIX字符组" class="headerlink" title="POSIX字符组"></a>POSIX字符组</h2><table>
<thead>
<tr>
<th align="center">POSIX字符组</th>
<th align="center">说明</th>
<th align="center">ASCII环境</th>
<th align="center">Unicode环境</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[:alnum:]</td>
<td align="center">字母字符和数字字符</td>
<td align="center">[a-zA-Z0-9]</td>
<td align="center">[\p{L&amp;}\p{Nd}]</td>
</tr>
<tr>
<td align="center">[:alpha:]</td>
<td align="center">字母</td>
<td align="center">[a-zA-Z]</td>
<td align="center">\p{L&amp;}</td>
</tr>
<tr>
<td align="center">[:ascii:]</td>
<td align="center">ASCII字符</td>
<td align="center">[\x00-\x7F]</td>
<td align="center">\p{InBasicLatin}</td>
</tr>
<tr>
<td align="center">[:blank:]</td>
<td align="center">空格字符和制表符</td>
<td align="center">[ \t]</td>
<td align="center">[\p{Zs}\t]</td>
</tr>
<tr>
<td align="center">[:cntrl:]</td>
<td align="center">控制字符</td>
<td align="center">[\x00-\x1F\x7F]</td>
<td align="center">\p{Cc}</td>
</tr>
<tr>
<td align="center">[:digit:]</td>
<td align="center">数字字符</td>
<td align="center">[0-9]</td>
<td align="center">\p{Nd}</td>
</tr>
<tr>
<td align="center">[:graph:]</td>
<td align="center">空白字符外的字符</td>
<td align="center">[\x21-\x7E]</td>
<td align="center">[^\p{Z}\p{C}]</td>
</tr>
<tr>
<td align="center">[:lower:]</td>
<td align="center">小写字母字符</td>
<td align="center">[a-z]</td>
<td align="center">\p{Ll}</td>
</tr>
<tr>
<td align="center">[:print:]</td>
<td align="center">类似[:graph:]但包含空白字符</td>
<td align="center">[\x20-\x7E]</td>
<td align="center">\P{C}</td>
</tr>
<tr>
<td align="center">[:punct:]</td>
<td align="center">标点符号</td>
<td align="center">[][!”#$%&amp;’()*+,.&#x2F;:;&lt;&#x3D;&gt;?@^_{|}~-]</td>
<td align="center">[\p{P}\p{S}]</td>
</tr>
<tr>
<td align="center">[:space:]</td>
<td align="center">空白字符</td>
<td align="center">[ \t\r\n\v\f]</td>
<td align="center">[\p{Z}\t\r\n\v\f]</td>
</tr>
<tr>
<td align="center">[:upper:]</td>
<td align="center">大写字母字符</td>
<td align="center">[A-Z]</td>
<td align="center">\p{Lu}</td>
</tr>
<tr>
<td align="center">[:word:]</td>
<td align="center">字母字符</td>
<td align="center">[A-Za-z0-9_]</td>
<td align="center">[\p{L}\p{N}\p{Pc}]</td>
</tr>
<tr>
<td align="center">[:xdigit:]</td>
<td align="center">十六进制字符</td>
<td align="center">[A-Fa-f0-9]</td>
<td align="center">[A-Fa-f0-9]</td>
</tr>
</tbody></table>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><table>
<thead>
<tr>
<th align="center">优先权</th>
<th align="center">符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center">最高</td>
<td align="center">\</td>
</tr>
<tr>
<td align="center">高</td>
<td align="center">()   (?:)   (?&#x3D;)   []</td>
</tr>
<tr>
<td align="center">中</td>
<td align="center">*   +   ?   {n}   {n,}   {n,m}</td>
</tr>
<tr>
<td align="center">低</td>
<td align="center">^   $   中介字符</td>
</tr>
<tr>
<td align="center">更低</td>
<td align="center">串接</td>
</tr>
<tr>
<td align="center">最低</td>
<td align="center">|</td>
</tr>
</tbody></table>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://regexr.com/">RegExr: Learn, Build, &amp; Test RegEx</a></p>
<p><a href="https://www.gnu.org/software/sed/manual/html_node/BRE-vs-ERE.html">BRE vs ERE (sed, a stream editor) (gnu.org)</a></p>
<p><a href="https://www.pcre.org/">PCRE - Perl Compatible Regular Expressions</a></p>
<p><a href="https://docs.python.org/zh-cn/3/library/re.html">re — 正则表达式操作 — Python 3.9.5 文档</a></p>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/2021/10/03/Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>shell是一个用户与Linux进行交互的接口程序，通常它会输出一个提示符，等待用户输入命令。如果该命令行的第一个的单词不是一个内置的shell命令，那么shell就会假设这是一个可执行文件的名字，它将加载并运行这个文件。Bash是当前Linux标准的默认shell。其他的shell包括zsh、powershell等。常用的Linux命令见附录。</p>
<span id="more"></span>

<h1 id="流、管道和重定向"><a href="#流、管道和重定向" class="headerlink" title="流、管道和重定向"></a>流、管道和重定向</h1><p>在操作系统中，流(stream)是一个很重要的概念，可以把它简单理解成一串连续的、可边读边处理的数据。其中标准流(standard stream)可以分为标准输入、标准输出和标准错误。</p>
<p>文件描述符(file descriptor)是内核为管理已打开的文件所创建的索引，使用一个非负整数来指代被打开的文件。Linux中的一切都可看作文件，流也不例外，所以输入和输出就被当做对应文件的读写来执行。标准流的定义在头文件unistd.h中，见附录。</p>
<p>管道(pipeline)是指一系列进程通过标准流连接在一起，前一个进程的输出(stdout)直接作为后一个进程的输入(stdin)。管道符号为”|”，例如：“ps -aux | grep bash”。常见Linux输入输出重定向见附录。</p>
<h1 id="根目录结构"><a href="#根目录结构" class="headerlink" title="根目录结构"></a>根目录结构</h1><p>Linux中的一切都可以看成文件，所有的文件和目录被组织成一个以根节点(斜杠&#x2F;)开始的倒置的树状结构，系统中的每个文件都是根目录的直接或间接后代。</p>
<p>Linux文件的三种基本文件类型分别如下：</p>
<ul>
<li>普通文件：包含文本文件(只含ASCII或Unicode字符，换行符为’\n’，即十六进制0x0A)和二进制文件(所有其他文件)。</li>
<li>目录：包含一组链接的文件，其中每个链接都将一个文件名映射到一个文件，这个文件可能是另一个目录。</li>
<li>特殊文件：包括块文件、符号链接、管道、套接字等。</li>
</ul>
<p>目录层次结构中的位置用路径名来指定，分为绝对路径名(从根节点开始)和相对路径名(从当前目录开始)两种。使用tree命令可以直观地查看目录树。</p>
<h1 id="用户组及文件权限"><a href="#用户组及文件权限" class="headerlink" title="用户组及文件权限"></a>用户组及文件权限</h1><p>Linux是一个支持多用户的操作系统，每个用户都有User ID(UID)和Group ID(GID)，其中UID是对一个用户的单一身份标识，而GID则对应多个UID。可以使用id命令来查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lu0k@LU0K:~$ id root</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">lu0k@LU0K:~$ id lu0k</span><br><span class="line">uid=1000(lu0k) gid=1000(lu0k) groups=1000(lu0k)</span><br></pre></td></tr></table></figure>

<p>UID为0的用户具有系统的完全访问权。而UID为1000的普通用户对系统的访问权限有限。</p>
<p>GID的关系存储在&#x2F;etc&#x2F;group文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lu0k@LU0K:~$ cat /etc/group | head</span><br><span class="line">root:x:0:</span><br><span class="line">daemon:x:1:</span><br><span class="line">bin:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:syslog,lu0k</span><br><span class="line">tty:x:5:syslog</span><br></pre></td></tr></table></figure>

<p>所有用户的信息(除了密码)都保存再&#x2F;etc&#x2F;passwd文件中，加密过的用户密码则保存在&#x2F;etc&#x2F;shadow文件中，此文件的访问需要root权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lu0k@LU0K:~$ cat /etc/passwd | head</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>whoami命令用于打印当前有效的用户名称，shell中普通用户以’$’开头，root用户以’#’开头。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lu0k@LU0K:~$ whoami</span><br><span class="line">lu0k</span><br></pre></td></tr></table></figure>

<p>在里Linux中，文件或目录权限的控制分别以读取、写入和执行3种一般权限来区分，另有3种特殊权限可供使用。可以使用”ls -l [file]”来查看某文件或目录的信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lu0k@LU0K:~$ ls -l .bashrc</span><br><span class="line">-rw-r--r-- 1 lu0k lu0k 3771 May 31 18:05 .bashrc</span><br></pre></td></tr></table></figure>

<ul>
<li>第一栏的第一个字母代表文件类型，目录(d)、普通文件(-)、链接文件(l)。</li>
<li>第一栏从第二个字母开始就是权限字符串，权限标志三个为一组，依次是所有者权限、组权限和其他人权限。权限对应关系见附录。</li>
</ul>
<p>用户可以使用chmod命令变更文件与目录的权限。权限范围被指定为所有者(u)、所属组(g)、其他人(o)和所有人(a)。chmod命令的用法如下：</p>
<ul>
<li>-R：递归处理，将目录下所有文件及子目录一并处理</li>
<li>&lt;权限范围&gt; + &lt;权限设置&gt;：添加权限。</li>
<li>&lt;权限范围&gt; - &lt;权限设置&gt;：删除权限。</li>
<li>&lt;权限范围&gt; &#x3D; &lt;权限设置&gt;：指定权限。</li>
</ul>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>环境变量相当于给系统或应用程序设置了一些参数，例如共享库的位置、命令行的参数等信息，对于程序的运行十分重要。环境变量字符串以”name &#x3D; value”这样的形式存在，大多数name由大写字母加下划线组成，通常把name部分称为环境变量名，value部分称为环境变量的值，其中value需要以’\0’结尾。</p>
<p>Linux环境变量的分类方法通常有下面两种：</p>
<ul>
<li>按生命周期划分：</li>
<li><ul>
<li>永久环境变量：修改相关配置文件，永久生效。</li>
<li>临时环境变量：通过export命令在当前终端下声明，关闭终端后失效。</li>
</ul>
</li>
<li>按作用域划分：</li>
<li><ul>
<li>系统环境变量：对该系统中的所有用户生效，可以在”&#x2F;etc&#x2F;profile”文件中声明。</li>
<li>用户环境变量：对特定用户生效，可以在”~&#x2F;.bashrc”文件中声明。</li>
</ul>
</li>
</ul>
<p>使用命令env可以打印出所有的环境变量，也可以对环境变量进行设置。</p>
<p><strong>PWN常用环境变量：</strong></p>
<ul>
<li>LD_PRELOAD：LD_PRELOAD环境变量可以定义程序运行时优先加载的动态链接库，这就允许预加载库中的函数和符号能够覆盖掉后加载的库中的函数和符号。可以通过修改该环境变量加载一个特定的libc。需要注意的是，ELF文件的INTERP字段指定了解释器ld.so的位置，如果该路径与动态链接库的位置不匹配，则会触发错误。</li>
<li>environ：libc中定义的全局变量environ指向内存中的环境变量表，更具体地，该表就位于栈上，因此通过泄露environ指针的地址，即可获得栈地址。</li>
</ul>
<h1 id="procfs文件系统"><a href="#procfs文件系统" class="headerlink" title="procfs文件系统"></a>procfs文件系统</h1><p>procfs文件系统是Linux内核提供的虚拟文件系统，为访问内核数据提供接口。它只占用内存而不占用存储。用户可以通过procfs查看有关系统硬件及当前正在运行的进程的信息，甚至可以通过修改其中的某些内容来改变内核的运行状态。</p>
<p>每个正在运行的进程都对应&#x2F;proc下的一个目录，目录名就是进程PID，每个目录包含：</p>
<ul>
<li>&#x2F;proc&#x2F;PID&#x2F;cmdline：启动该进程的命令行</li>
<li>&#x2F;proc&#x2F;PID&#x2F;cwd：当前工作目录的符号链接</li>
<li>&#x2F;proc&#x2F;PID&#x2F;environ：影响进程的环境变量的名字和值</li>
<li>&#x2F;proc&#x2F;PID&#x2F;exe：最初的可执行文件的符号链接, 如果它还存在的话</li>
<li>&#x2F;proc&#x2F;PID&#x2F;fd：一个目录，包含每个打开的文件描述符的符号链接</li>
<li>&#x2F;proc&#x2F;PID&#x2F;fdinfo：一个目录，包含每个打开的文件描述符的位置和标记</li>
<li>&#x2F;proc&#x2F;PID&#x2F;maps：一个文本文件，包含内存映射文件与块的信息</li>
<li>&#x2F;proc&#x2F;PID&#x2F;mem：一个二进制图像(image)表示进程的虚拟内存，只能通过ptrace化进程访问</li>
<li>&#x2F;proc&#x2F;PID&#x2F;root：该进程所能看到的根路径的符号链接。如果没有chroot监狱，那么进程的根路径是&#x2F;</li>
<li>&#x2F;proc&#x2F;PID&#x2F;status：包含了进程的基本信息，包括运行状态、内存使用</li>
<li>&#x2F;proc&#x2F;PID&#x2F;task：一个目录包含了硬链接到该进程启动的任何任务</li>
</ul>
<h1 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h1><p>计算机中采用了两种字节存储机制：大端(Big-endian)和小端(Little-endian)。其中大端规定MSB(Most Significan Bit&#x2F;Byte)在存储时放在低地址，在传输时放在流的开始；LSB(Least Significan Bit&#x2F;Byte)在存储时放在高地址，在传输时放在流的末尾。小端则正好相反。常见的Intel处理器使用小端，而PowerPC系列处理器使用大端，另外，TCP&#x2F;IP协议和Java虚拟机的字节序也是大端。</p>
<h1 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h1><p>函数调用约定是对函数调用时如何传递参数的一种约定。</p>
<ul>
<li>内核接口</li>
<li><ul>
<li>x86-32系统调用约定：Linux系统调用使用寄存器传递参数。eax为syscall_number，ebx、ecx、edx、esi和ebp用于将6个参数传递给系统调用。返回值保存在eax中。所有其他寄存器(包括EFLAGS)都保留在int 0x80中。</li>
<li>x86-64系统调用约定：内核接口使用的寄存器有rdi、rsi、rdx、r10、r8和r9。系统调用通过syscall指令完成。除了rcx、r11和rax，其他的寄存器都被保留。系统调用的编号必须在rax中传递。系统调用的参数限制为6个，不直接从堆栈上传递任何参数。返回时，rax中包含了系统调用的结果，而且只有INTEGER或者MEMORY类型的值才会被传递给内核。</li>
</ul>
</li>
<li>用户接口</li>
<li><ul>
<li>x86-32系统调用约定：参数通过栈传递。最后一个参数第一个被放进栈中，直到所有的参数都放置完毕，然后执行call指令。这也是Linux上C语言默认的方式。</li>
<li>x86-64系统调用约定：x86-64下通过寄存器传递参数，这样做会比通过栈具有更高的效率。它避免了内存中参数的存取和额外的指令。根据参数类型的不同，会使用寄存器或传参方式。如果参数的类型是MEMORY，则在栈上传递参数。如果类型是INTEGER，则顺序使用rdi、rsi、rdx、rcx、r8和r9。所以如果有多于6个的INTEGER参数，则后面的参数在栈上传递。</li>
</ul>
</li>
</ul>
<h1 id="核心转储"><a href="#核心转储" class="headerlink" title="核心转储"></a>核心转储</h1><p>当程序运行的过程中出现异常终止或崩溃，系统就会将程序崩溃时的内存、寄存器状态、堆栈指针、内存管理信息等记录下来，保存在一个文件中，叫作核心转储(Core Dump)。</p>
<p>会产生核心转储的信号有如下几种：</p>
<table>
<thead>
<tr>
<th align="center">信号</th>
<th align="center">动作</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SIGQUIT</td>
<td align="center">Core</td>
<td align="center">通过键盘退出时</td>
</tr>
<tr>
<td align="center">SIGILL</td>
<td align="center">Core</td>
<td align="center">遇到不合法的指令时</td>
</tr>
<tr>
<td align="center">SIGABRT</td>
<td align="center">Core</td>
<td align="center">从abort中产生的信号</td>
</tr>
<tr>
<td align="center">SIGSEGV</td>
<td align="center">Core</td>
<td align="center">无效的内存访问</td>
</tr>
<tr>
<td align="center">SIGTRAP</td>
<td align="center">Core</td>
<td align="center">trace&#x2F;breakpoint陷阱</td>
</tr>
</tbody></table>
<h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>在Linux中，系统调用是一些内核空间函数，是用户空间访问内核的唯一手段。这些函数与CPU架构有关，x86提供了358个系统调用，x86-64提供了322个系统调用。</p>
<p>在使用汇编写程序(如Shellcode)时，常常需要使用系统调用。早在2.6及更早版本的内核都使用软中断int 0x80进行系统调用，但是由于其性能较差，在后续版本的内核中被快速系统调用指令替代，32位系统使用sysenter(对应sysexit)指令，64位系统则使用syscall(对应sysret)指令。</p>
<p>一般情况下，应用程序通过在用户空间实现的应用编程接口(API)而不是系统调用来进行编程，而这些接口很多都是系统调用的封装。例如函数printf()的调用过程如下所示：</p>
<center>调用printf() ==> C库中的printf() ==> C库中的write() ==> write系统调用</center>

<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><table>
<thead>
<tr>
<th align="center">标准格式：命令名称  [命令参数]  [命令对象]</th>
<th align="center">命令功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ls  [OPTION]…  [FILE]…</td>
<td align="center">列出文件信息</td>
</tr>
<tr>
<td align="center">cd  [-L|[-P  [-e]]  [-@]]  [dir]</td>
<td align="center">切换工作目录</td>
</tr>
<tr>
<td align="center">pwd  [-LP]</td>
<td align="center">显示当前工作目录</td>
</tr>
<tr>
<td align="center">uname  [OPTION]</td>
<td align="center">打印系统信息</td>
</tr>
<tr>
<td align="center">whoami  [OPTION]</td>
<td align="center">打印用户名</td>
</tr>
<tr>
<td align="center">man  [OPTION…]  [SECTION]  PAGE…</td>
<td align="center">查询帮助信息</td>
</tr>
<tr>
<td align="center">find  [options]  [path…]  [expression]</td>
<td align="center">查找文件</td>
</tr>
<tr>
<td align="center">echo  [SHORT-OPTION]…  [STRING]…</td>
<td align="center">打印文本，参数’-e’可激活转义字符</td>
</tr>
<tr>
<td align="center">cat  [OPTION]…  [FILE]</td>
<td align="center">打印到标准输出</td>
</tr>
<tr>
<td align="center">less  [options]  file…</td>
<td align="center">分页打印文本，比more提供更丰富的功能</td>
</tr>
<tr>
<td align="center">head&#x2F;tail  [OPTION]…  [FILE]</td>
<td align="center">打印文本的前&#x2F;后N行</td>
</tr>
<tr>
<td align="center">grep  [OPTION]…  PATTERN  [FILE]…</td>
<td align="center">匹配文本模式</td>
</tr>
<tr>
<td align="center">cut  OPTION…  [FILE]…</td>
<td align="center">通过列提取文本</td>
</tr>
<tr>
<td align="center">diff  [OPTION]…  FILES</td>
<td align="center">比较文本差异</td>
</tr>
<tr>
<td align="center">mv  [OPTION]…  [-T]  SOURCE  DEST</td>
<td align="center">移动或重命名文件</td>
</tr>
<tr>
<td align="center">cp  [OPTION]…  [-T]  SOURCE  DEST</td>
<td align="center">复制文件</td>
</tr>
<tr>
<td align="center">rm  [OPTION]…  [FILE]…</td>
<td align="center">删除文件</td>
</tr>
<tr>
<td align="center">ps  [options]</td>
<td align="center">查看进程状态</td>
</tr>
<tr>
<td align="center">top  [options]</td>
<td align="center">实时查看系统运行情况</td>
</tr>
<tr>
<td align="center">kill  [options]  &lt;pid&gt;  […]</td>
<td align="center">杀死进程</td>
</tr>
<tr>
<td align="center">ifconfig  [-v]  [-a]  [-s]  [interface]</td>
<td align="center">查看或设置网络设备</td>
</tr>
<tr>
<td align="center">ping  [options]  destination</td>
<td align="center">判断网络主机是否响应</td>
</tr>
<tr>
<td align="center">netstat  [options]</td>
<td align="center">查看网络、路由器、接口等信息</td>
</tr>
<tr>
<td align="center">nc  [options]</td>
<td align="center">建立TCP&#x2F;UDP连接并监听</td>
</tr>
<tr>
<td align="center">su  [options]  [username]</td>
<td align="center">切换到用户</td>
</tr>
<tr>
<td align="center">touch  [OPTION]…  FILE…</td>
<td align="center">创建文件</td>
</tr>
<tr>
<td align="center">mkdir  [OPTION]…  DIRECTORY</td>
<td align="center">创建目录</td>
</tr>
<tr>
<td align="center">chmod  [OPTION]…  MODE[,MODE]…  FILE…</td>
<td align="center">变更文件或目录权限</td>
</tr>
<tr>
<td align="center">chown  [OPTION]…  [OWNER][:[GROUP]]  FILE…</td>
<td align="center">变更文件或目录所属者</td>
</tr>
<tr>
<td align="center">nano  &#x2F;  vim  &#x2F;  emacs</td>
<td align="center">终端文本编辑器</td>
</tr>
<tr>
<td align="center">history  [-c]  [-d  offset]  [n]</td>
<td align="center">查看”.bash_history”中的历史命令</td>
</tr>
<tr>
<td align="center">exit</td>
<td align="center">退出shell</td>
</tr>
</tbody></table>
<h2 id="标准流定义"><a href="#标准流定义" class="headerlink" title="标准流定义"></a>标准流定义</h2><table>
<thead>
<tr>
<th align="center">文件描述符</th>
<th align="center">常量</th>
<th align="center">用途</th>
<th align="center">stdio流</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">STDIN_FILENO</td>
<td align="center">标准输入</td>
<td align="center">stdin</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">STDOUT_FILENO</td>
<td align="center">标准输出</td>
<td align="center">stdout</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">STDERR_FILENO</td>
<td align="center">标准错误</td>
<td align="center">stderr</td>
</tr>
</tbody></table>
<h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><table>
<thead>
<tr>
<th align="center">重定向符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cmd &gt; file</td>
<td align="center">将cmd的标准输出重定向并覆盖file</td>
</tr>
<tr>
<td align="center">cmd &gt;&gt; file</td>
<td align="center">将cmd的标准输出重定向并追加到file</td>
</tr>
<tr>
<td align="center">cmd &lt; file</td>
<td align="center">将file作为cmd的标准输入</td>
</tr>
<tr>
<td align="center">cmd &lt;&lt; tag</td>
<td align="center">从标准输入中读取，直到遇到tag为止</td>
</tr>
<tr>
<td align="center">cmd &lt; file1 &gt; file2</td>
<td align="center">将file1作为cmd的标准输入并将标准输出重定向到file2</td>
</tr>
<tr>
<td align="center">cmd 2 &gt; file</td>
<td align="center">将cmd的标准错误重定向并覆盖file</td>
</tr>
<tr>
<td align="center">cmd 2 &gt;&gt; file</td>
<td align="center">将cmd的标准错误重定向并追加到file</td>
</tr>
<tr>
<td align="center">2 &gt;&amp; 1</td>
<td align="center">将标准错误和标准输出合并</td>
</tr>
</tbody></table>
<h2 id="权限对应表"><a href="#权限对应表" class="headerlink" title="权限对应表"></a>权限对应表</h2><table>
<thead>
<tr>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">9</th>
<th align="center">10</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">所有</td>
<td align="center">者</td>
<td align="center">权限</td>
<td align="center">组</td>
<td align="center">权</td>
<td align="center">限</td>
<td align="center">其他</td>
<td align="center">人</td>
<td align="center">权限</td>
</tr>
<tr>
<td align="center">文件权限</td>
<td align="center">读</td>
<td align="center">写</td>
<td align="center">执行</td>
<td align="center">读</td>
<td align="center">写</td>
<td align="center">执行</td>
<td align="center">读</td>
<td align="center">写</td>
<td align="center">执行</td>
</tr>
<tr>
<td align="center">d&#x2F;l&#x2F;s&#x2F;p&#x2F;c&#x2F;b&#x2F;-</td>
<td align="center">r</td>
<td align="center">w</td>
<td align="center">x</td>
<td align="center">r</td>
<td align="center">w</td>
<td align="center">x</td>
<td align="center">r</td>
<td align="center">w</td>
<td align="center">x</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安全机制简介</title>
    <url>/2021/10/04/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Stack-Canaries"><a href="#Stack-Canaries" class="headerlink" title="Stack Canaries"></a>Stack Canaries</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Stack Canaries是一种用于对抗栈溢出攻击的技术，即SSP安全机制，有时也叫Stack Cookies。Canary的值是栈上的一个随机数，在程序启动时随机生成并保存在比函数返回地址更低的位置。由于栈溢出是从低地址向高地址进行覆盖，因此攻击者要想控制函数的返回指针，就一定要覆盖到Canary。程序只需要在函数返回前检查Canary是否被篡改，就可以达到保护栈的目的。</p>
<span id="more"></span>

<p>Canaries通常可分为3类：terminator、random和random XOR，具体的实现有StackGuard、StackShield、ProPoliced等。</p>
<ul>
<li>Terminator Canaries：由于许多栈溢出都是由于字符串操作(如：strcpy)不当所产生的，而这些字符串以NULL’\x00’结尾，也就是被’\x00’所截断。基于这一点，Terminator Canaries将低位设置为’\x00’，既可防止被泄露，也可以防止被伪造。截断字符还包括CR(0X0d)、LF(0x0a)和EOF(0xff)。</li>
<li>Random Canaries：为防止Canaries被攻击者猜到，Randon Canaries通常在程序初始化时随机生成，并保存在一个相对安全的地方。随机数通常由&#x2F;dev&#x2F;urandom生成，有时也使用当前时间的Hash。</li>
<li>Random XOR Canaries：与Random Canaries类似，但多了一个XOR操作，增加了攻击难度。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>以64位程序为例，在程序加载时glibc中的ld.so首先初始化TLS(线程局部存储，Thread Local Storage，主要是为了避免多个线程同时访问同一全局变量或者静态变量时所导致的冲突)，包括为其分配空间以及设置fs寄存器指向TLS，这一部分是通过arch_prctl系统调用完成的。然后程序调用security_init()函数，生成Canary的值stack_chk_guard，并放入fs所指向的位置。</p>
<p>除security_init()函数外，在__libc_start_main()函数中也可以生成Canary。其中__dl_random指向一个由内核提供的随机数，当然也可以选择由glibc自己产生。这些随机数是根据计算机周围环境生成熵池，然后利用多种哈希算法计算而成。接着进入_dl_setup_stack_chk_guard()函数，并根据位数(32或64)以及字节序生成相应的Canary值。需要注意的是，为了使Canary具有字符截断的效果，其最低为被设置为0x00。而如果dl_random指针为NULL，那么Canary定值。然后程序将生成的Canary交给THREAD_SET_STACK_GUARD宏进行处理，其中THREAD_SETMEM可以直接修改线程描述符的成员，而THREAD_SELF就是指当前线程的线程描述符。执行完毕后，Canary值就被放到fs寄存器所指向的位置，程序运行时即可取出使用。但是如果程序没有定义THREAD_SET_STACK_GUARD宏，通常是一些TLS不用于储存Canary的体系结构，那么就会把这个值直接赋值给__stack_chk_guard，这是一个全局变量，放在.bss段中。</p>
<h2 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>攻击Canaries是要注意的是避免程序崩溃，由此就有两种思路：</p>
<ul>
<li>将Canaries的值泄露出来，然后在栈溢出时覆盖上去，使其保持不变。</li>
<li>同时篡改TLS和栈上的Canaries，借此通过检查。</li>
</ul>
<h1 id="No-eXecute"><a href="#No-eXecute" class="headerlink" title="No-eXecute"></a>No-eXecute</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>No-eXecute(NX)，表示不可执行，其原理是将数据所在的内存页(例如堆和栈)标识为不可执行，如果程序产生溢出转入执行shellcode时，CPU就会抛出异常。通常我们使用可执行空间保护(executable space protection)作为一个统称，来描述这种防止传统代码注入攻击的技术——攻击者将恶意代码注入正在运行的程序中，然后使用内存损坏漏洞将控制流重定向到该代码。实施这种保护的技术有多种名称，在Windows上称为数据执行保护(DEP)，在Linux上则有NX、W^X、PaX和Exec Shield等。</p>
<p>NX的实现需要软件和硬件共同完成。首先在硬件层面，它利用处理器的NX位，对相应页的表项中的第63位进行设置，设置为1表示内容不可执行，设置为0表示内容可执行。一旦程序计数器(PC)被放到受保护的页面内，就会触发硬件层面的异常。其次，在软件层面，操作系统需要支持NX，以便正确配置页表，但有时这会给自修改代码或者动态生成的代码(JIT编译代码)带来一些问题，这在浏览器上很常见。这时，软件需要使用适当的API来分配内存，例如Windows上使用VirtualProtect或VirtualAlloc，Linux上使用mprotect或者mmap，这些API允许更改已分配页面的保护级别。</p>
<p>在Linux中，当装载器将程序装载进内存空间后，将程序的.text节标记为可执行，而其余的数据段(.data、.bss等)以及栈、堆均为不可执行。因此，传统的通过修改GOT来执行shellcode的方式不再可行。但NX这种保护并不能组织攻击者通过代码重用来进行攻击(ret2libc)。Ubuntu中已经默认启用了NX。GNU_STACK段在禁用NX时权限为RWX，而开启后权限仅为RW，不可执行。</p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>NX在binutils和Linux内核里的相关实现，首先是处理编译参数，当传入”-z execstack”时，参数解析的调用链如下所示，在handle_option()函数中会对link_info进行设置(execstack和noexecstack)。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()-&gt;parse_args()-&gt;ldemul_handle_option()-&gt;ld_emulation-&gt;handle_option()</span><br></pre></td></tr></table></figure>

<p>然后，需要做一些分配地址前的准备工作，比如设置段的长度，调用链如下所示，根据link_info里的值设置GNU_STACK段的权限stack_flags。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()-&gt;lang_process()-&gt;ldemul_before_allocation()-&gt;ld_emulation-&gt;before_allocation()-&gt;bfd_elf_size_dynamic_sections()</span><br></pre></td></tr></table></figure>

<p>最后，就是生成ELF文件，调用链如下所示。每段都包含了一个或多个节，即根据不同的权限对这些节进行分组，从而节省资源。程序根据stack_flags的值来设置p_flags。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()-&gt;ld_write()-&gt;bfd_final_link()-&gt;bfd_elf_final_link()-&gt;_bfd_elf_compute_section_file_postions()-&gt;assign_file_positions_except_relocs()-&gt;assign_file_positions_for_segments()-&gt;map_sections_to_segments()</span><br></pre></td></tr></table></figure>

<p>至此ELF文件已编译完成，在加载执行时，load_elf_binary()函数中根据p_flags进行权限设置。然后将executable_stack传入setup_arg_pages()函数，通过vm_flags设置进程的虚拟内存空间vma。</p>
<h2 id="安全性分析-1"><a href="#安全性分析-1" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>由于开启NX后，有我们自己注入的、放在栈上的shellcode就不可执行了，因此只能使用程序自有的代码进行重放攻击，例如ret2libc，改变程序执行流到libc中的system(“&#x2F;bin&#x2F;sh”)。在关闭ASLR的情况下，libc的地址是固定的，system()和”&#x2F;bin&#x2F;sh”相对基地址的偏移也是固定的，所以可以直接硬编码到exp里。</p>
<h1 id="ASLR和PIE"><a href="#ASLR和PIE" class="headerlink" title="ASLR和PIE"></a>ASLR和PIE</h1><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>大多数攻击都基于这样一个前提，即攻击者知道程序的内存布局，需要提前知道shellcode或者其他一些数据的位置。因此，引入内存布局的随机化能够有效增加漏洞利用的难度，其中一种技术就是地址空间布局随机化(Address Space Layout Randomization，ASLR)，它最早出现于2001年出现的PaX项目中，于2005年正式成为Linux的一部分，已广泛应用于各类操作系统中。ASLR提供的只是概率上的安全性，根据用于随机化的熵，攻击者有可能幸运地猜测到正确地址，有时攻击者还可以爆破。一个著名的例子是Apache服务器，它的每个连接都会复刻一个子进程，但这些子进程并不会重新进行随机化，而是与主进程共享内存布局，所以攻击者可以不断尝试，直到找到正确地址。</p>
<p>在Linux上，ASLR的全局配置&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space有三种情况：0表示关闭ASLR；1表示部分开启(将mmap的基址，stack和vdso页面随机化)；2表示完全开启(在部分开启的基础上增加heap的随机化)。如下所示：</p>
<table>
<thead>
<tr>
<th align="center">ASLR</th>
<th align="center">Executable</th>
<th align="center">PLT</th>
<th align="center">Heap</th>
<th align="center">Stack</th>
<th align="center">Shared libraries</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">2+PIE</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>在关闭ASLR的情况下，程序每次运行的地址都是相同的，而在完全开始时，栈，堆和libc都有变化，但程序本身以及PLT不变。</p>
<h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>由于ASLR是一种操作系统层面的技术，而二进制程序本身是不支持随机化加载的，便出现了一些绕过方式，例如ret2plt，GOT劫持，地址爆破等。于是，人们于2003年引入了位置无关可执行文件(Position-Independent Executable，PIE)，它在应用层的编译器上实现，通过将程序编译为位置无关代码(Position-Independent Code，PIC)，使程序可以被加载到任意位置，就像是一个特殊的共享库。在PIE和ASLR同时开启的情况下，攻击者将对程序的内存布局一无所知，大大增加了利用难度。然而，在增加安全性的同时，PIE也会一定程度上影响性能，因此在许多操作系统上PIE仅用于一些对安全性要求比较高的程序。</p>
<p>GCC支持的PIE选项如下，-fpie是代码生成选项，其生成的位置无关代码可以被-pie选项链接到可执行文件中。</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-fpic</td>
<td align="center">为共享库生成位置无关代码</td>
</tr>
<tr>
<td align="center">-pie</td>
<td align="center">生成动态链接的位置无关可执行文件，通常需要同时指定-fpie</td>
</tr>
<tr>
<td align="center">-no-pie</td>
<td align="center">不生成动态链接的位置无关可执行文件</td>
</tr>
<tr>
<td align="center">-fpie</td>
<td align="center">类似于-fpic，但生成的位置无关代码只能用于可执行文件，通常同时指定-pie</td>
</tr>
<tr>
<td align="center">-fno-pie</td>
<td align="center">不生成位置无关代码</td>
</tr>
</tbody></table>
<p>然而，无论是ASLR还是PIE，由于粒度问题，被随机化的都只是某个对象的起始地址，而在该对象的内部依然保持原来的结构，也就是说相对偏移是不会变的。</p>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>ASLR在内核里的实现如下：根据传入的两个参数start和range，系统通过randomize_page函数在[start，start+range]范围内返回一个页对齐的随机地址。程序加载时，对全局配置randomize_va_space的值进行判断，如果不为0，就将current-&gt;flags的PF_RANDOMIZE置位，对后续的加载行为产生影响，例如函数randomize_stack_top()用于获得随机的栈顶地址。当randomize_va_space大于1时，还会获得一个随机的brk()基地址，使堆的分配产生随机化。load_bias会被设置成一个不为0的值，根据它来计算ELF的偏移。</p>
<h2 id="安全性分析-2"><a href="#安全性分析-2" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>ALSR与PIE虽然随机化了一部分地址，但是其程序结构依然存在，也就是说，相对偏移是不变的。基于此可以使用ret2plt，GOT劫持，地址爆破等来绕过。</p>
<h1 id="FORTIFY-SOURCE"><a href="#FORTIFY-SOURCE" class="headerlink" title="FORTIFY_SOURCE"></a>FORTIFY_SOURCE</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>FORTIFY_SOURCE是一种针对危险函数的检查机制，在编译时尝试去确定风险是否存在，或者将危险函数替换为相对安全的函数实现，以大大降低缓冲区溢出发生的风险。其最初来自2004年RedHat工程师针对GCC和glibc的一个安全补丁，该补丁为字符串操作函数提供了轻量级的缓冲区溢出攻击和格式化字符串攻击检查，它会将危险函数替换为安全函数，且不会对程序执行的性能产生大的影响。目前所支持的函数有memcpy、memmove、memset、strcpy、stpcpy、strncpy、strcat、strncat、sprintf、vsprintf、snprintf、vsnprintf、gets等，这些安全函数位于glibc源码下的debug目录下。</p>
<p>在Ubuntu16.04(GCC5.4.0)上，该机制默认是关闭的。当指定了优化等级(-O)为1以上，相当于默认开启FORTIFY_SOURCE的等级为1，如果我们希望检查等级为2，则需要手动指定参数。当然该机制并不仅仅能够应用于glibc，只需要将相应的头文件string.h、stdio.h等打上补丁，也能够获得该机制的保护。</p>
<ul>
<li>-D_FORTIFY_SOURCE&#x3D;1时，开启缓冲区溢出攻击检查</li>
<li>-D_FORTIFY_SOURCE&#x3D;2时，开启缓冲区溢出以及格式化字符串攻击检查</li>
</ul>
<h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><p>首先来看缓冲区溢出的检查。以安全函数__strcpy_chk()为例，可以看到该函数首先判断源数据的长度是否大于目标缓冲区的大小，如果是，就调用__chk_fail()抛出异常，否则就调用普通函数memcpy()进行字符串复制操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> * __strcpy_chk(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">size_t</span> destlen)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">if</span>(len &gt;= destlen)</span><br><span class="line">        __chk_fail();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(dest, src, len + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是格式化字符串攻击的检查，以安全函数__printf_chk()为例，在实际运行时，flag被置为1，于是stdout-&gt;_flags2也就被置为_IO_FLAGS2_FORTIFY&#x3D;4，即启用FORTIFY_SOURCE安全检查。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_FLAGS2_FORTIFY 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __printf_chk(<span class="keyword">int</span> flag, <span class="keyword">const</span> <span class="keyword">char</span> *format, ···)&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="keyword">int</span> done;</span><br><span class="line">    </span><br><span class="line">    _IO_acquire_lock_clear_flags2(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">stdout</span>-&gt;_flags2 |= _IO_FLAGS2_FORTIFY;</span><br><span class="line">    </span><br><span class="line">    va_start(ap, format);</span><br><span class="line">    done = <span class="built_in">vfprintf</span>(<span class="built_in">stdout</span>, format, ap);</span><br><span class="line">    va_end(ap);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(flag &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">stdout</span>-&gt;_flags2 &amp;= ~_IO_FLAGS2_FORTIFY;</span><br><span class="line">    _IO_release_lock(<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后进入函数vfprintf()，该函数中有两个安全检查，一个是针对%n格式字符串的，如果程序试图利用%n写入拥有写权限的内存(如栈、堆、BSS段等)，就抛出异常。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LABEL(form_number):</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;_flags2 &amp; _IO_FLAGS2_FORTIFY)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!readonly_format)&#123;</span><br><span class="line">            <span class="keyword">extern</span> <span class="keyword">int</span> __readonly_area(<span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">size_t</span>) attritube_hidden;</span><br><span class="line">            readonly_format = __readonly_area(format, ((STR_LEN(format) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(CHAR_T)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(readonly_format &lt; <span class="number">0</span>)</span><br><span class="line">            __libc_fatal(<span class="string">&quot;*** %n in writable segment detected ***\n&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>另一个是针对%N$这种带有位置参数的格式字符串的，代码如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">args_size = &amp;args_value[nargs].pa_int;</span><br><span class="line">args_type = &amp;args_size[nargs];</span><br><span class="line"><span class="built_in">memset</span>(args_type, s-&gt;_flags2 &amp; _IO_FLAGS_FORTIFY ? <span class="string">&#x27;\xff&#x27;</span> : <span class="string">&#x27;\0&#x27;</span>, nargs * <span class="keyword">sizeof</span>(*arhs_type));</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; nargs; ++cnt)</span><br><span class="line">        <span class="keyword">switch</span>(args_type[cnt])&#123;</span><br><span class="line">            ......</span><br><span class="line">        	<span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">				<span class="comment">//error case</span></span><br><span class="line">				assert(s-&gt;_flags2 &amp; _IO_FLAGS2_FORTIFY);</span><br><span class="line">				__libc_fatal(<span class="string">&quot;*** invalid %N$ use detected ***\n&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>代码中的nargs是格式字符串的最大参数，代表格式字符串各参数使用情况的args_type被初始化为-1，然后进入一个循环switch，对nargs之前的所有args_type进行检查，如果是-1，则说明该参数没有被使用，抛出异常。</p>
<h2 id="安全性分析-3"><a href="#安全性分析-3" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>Captain Planet发表在Phrack的文章A Eulogy for Format Strings讲述了如何利用vfprintf()函数的一个整数溢出，将位于栈上的_IO_FILE结构中的_IO_FLAGS2_FORTIFY篡改为0，从而关闭FORTIFY_SOURCE对%n的检查，然后再次利用任意地址写，将nargs篡改为0，从而关闭对%N$的检查。</p>
<p>vfprintf()存在任意4-byte NULL写的漏洞，通过提前计算好栈与_IO_FLAGS2_FORTIFY的偏移，利用该偏移构造一个恶意的格式化字符串，使args_type[ATTACKER_OFFSET] &#x3D; 0x00000000，从而达到任意地址写。例如传入的格式化字符串为%1$*269096872$x。</p>
<p>除此以外，CVE-2012-0809是sudo-1.8版本存在的一个格式化字符串漏洞，longld的文章 Exploiting Sudo format string vunerability中利用同样的方法，成功绕过了FORTIFY_SOURCE。</p>
<h1 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>在启用延迟绑定时，符号的解析只发生在第一次使用的时候，该过程是通过PLT表进行的，解析完成后，相应的GOT条目会被修改为正确的函数地址。因此，在延迟绑定的情况下，.got.plt必须是可写的，这就给了攻击者篡改地址劫持程序执行的可能。符号解析过程的详细描述，以及攻击方法可以查看ret2dl-resolve。</p>
<p>RELRO(ReLocation Read-Only)机制的提出就是为了解决延迟绑定的安全问题，它最初于2004年由RedHat的工程师Jakub Jelinek实现，它将符号重定向表设置为只读，或者在程序启动时就解析并绑定所有动态符号，从而避免GOT上的地址被篡改。如今，RELRO有两种形式：</p>
<ul>
<li>Partial RELRO：一些段(包括.dynamic，.got等)在初始化后将会被标记为只读。在Ubuntu16.04(GCC-5.4.0)上，默认开启Partial RELRO。</li>
<li>Full RELRO：除了Partial RELRO，延迟绑定将被禁止，所有的导入符号将在开始时被解析，.got.plt段会被完全初始化为目标函数的最终地址，并被mprotect标记为只读，但其实.got.plt会直接被合并到.got，也就看不到这段了。另外link_map和_dl_runtime_resolve的地址也不会被装入。开启Full RELRO会对程序启动时的性能造成一定的影响，但也只有这样才能防止攻击者篡改GOT。</li>
</ul>
<h2 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h2><p>在有延迟绑定时，第一次执行call指令被跳转到print@plt，然后jmp到对应的.got.plt项，再跳回来进行符号绑定，完成后.got.plt项才被修改为真正的函数地址。</p>
<p>而在没有延迟绑定时，所有的解析工作在程序加载时完成，执行call指令跳转到对应的.plt.got项，然后jmp到对应的.got项，这里已经保存了解析好的函数地址。</p>
<p>所以RELRO的一大任务就是处理函数调用的问题。在binutils-2.26.1的源码里找到一个函数elf_x86_64_allocate_dynrelocs()，如果启用了Full RELRO，也就是关闭了延迟绑定，那么就不会使用常规的.plt，而是使用.plt.got作为跳板。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bfd/elf64-x86-64</span></span><br><span class="line"><span class="keyword">if</span>((info-&gt;flags &amp; DF_BIND_NOW) &amp;&amp; !h-&gt;pointer_equality_needed)&#123;</span><br><span class="line">    <span class="comment">/*Don&#x27;t use the regular PLT for DF_BIND_NOW.*/</span></span><br><span class="line">    h-&gt;plt.offset = (bfd_vma) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*Use the GOT PLT.*/</span></span><br><span class="line">    h-&gt;got.refcount = <span class="number">1</span>;</span><br><span class="line">    eh-&gt;plt_got.refcount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="安全性分析-4"><a href="#安全性分析-4" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>在不完全开启RELRO时，外部符号还未被解析时，此时got表项对应的不是真正的外部函数的地址，在第一次调用外部符号时会执行符号解析逻辑，可以采用Ret2dl_resolve方法进行攻击。而完全开启RELRO时，就需要更复杂的手段来实现绕过。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB Cap</title>
    <url>/2021/10/05/HTB-Cap/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="060947372016145a33967db4fd2d9d6a231f4e0b1f79382bc46e12908b3affff"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>HTB Machines</category>
      </categories>
      <tags>
        <tag>Pcap</tag>
        <tag>Suid</tag>
      </tags>
  </entry>
</search>
